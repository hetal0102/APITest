{
	"info": {
		"_postman_id": "8cbb8a08-bfea-4c9e-82dd-1822f72871d0",
		"name": "GoRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37321550"
	},
	"item": [
		{
			"name": "GoRestAPIs",
			"item": [
				{
					"name": "GetAllUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									" var count=pm.response.json().length",
									" pm.expect(count).to.eql(count);",
									"//pm.expect(count).to.be.below(count);",
									"// pm.expect(count).to.be.above(count);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer f0d4f3d95955b75cabaf0a42a5492bb3dc62f2205cae867f5c9a92f934ffcbf9",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/public/v2/posts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var jsonObject = pm.response.json()",
									"",
									"var id=jsonObject.id",
									"pm.environment.set(\"UserID\",jsonObject.id);",
									"",
									"pm.test(\"User ID is not null\", function () {",
									"    pm.expect(jsonObject.id).to.not.be.null;",
									"});",
									"pm.test(\"User ID is an integer\", function () {",
									"    pm.expect(jsonObject.id).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate a unique identifier using timestamp and a random number",
									"",
									"var uniqueId=new Date().getTime()+Math.floor(Math.random()*1000);",
									"",
									"// create unique email",
									"",
									"var uniqueEmailId=\"mukesh\"+uniqueId+\"@gmail.com\";",
									"",
									"//set the unique email in a enviournment variable",
									"",
									"pm.environment.set(\"uniqueEmailId\",uniqueEmailId);",
									"",
									"console.log(\"uniqueEmailId\");",
									"",
									"//create unique name",
									"",
									"var uniqueName=\"Mukesh\"+uniqueId;",
									"",
									"//se the unique name in a enviournment variable",
									"",
									"pm.environment.set(\"uniqueName\",uniqueName);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{uniqueName}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{uniqueEmailId}}\",\n    \"status\": \"active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/public/v2/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser_put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed ReferenceError by defining the response variable",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.expect(response.name).to.include(\"Otwani\");",
									"",
									"// var response = pm.response.json();",
									"// pm.test(\"Response contains 'Otwani'\", function () {",
									"//     pm.expect(jsonResponse.name).to.include(\"Otwani\");",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{uniqueName}}\",\n    \"gender\": \"female\",\n    \"email\": \"{{uniqueEmailId}}\",\n    \"status\": \"inactive\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/public/v2/users/{{UserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{UserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"var jsonResponse = pm.response.json();",
									"pm.test(\"Response contains message 'No Content'\", function () {",
									"     pm.expect(jsonResponse.message).to.eql(\"No Content\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/public/v2/users/{{UserID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{UserID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}